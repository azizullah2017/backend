from rest_framework import serializers
from .models import User, ShipmentStatus, CLRModel, \
    PortStatus, CityWiseTracker, Addcity

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['uid', 'username', 'password', 'email', 'role','mobile_no','company_name']
        extra_kwargs = {'password': {'write_only': True}}
        read_only_fields = ['uid']

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        return user
    
    # def validate(self, data):
    #     username = data.get('username')
    #     if User.objects.filter(username=username).exclude(pk=self.instance.pk).exists():
    #         raise serializers.ValidationError("Username already exists.")
    #     return data

class ClrSerializer(serializers.ModelSerializer):
    class Meta:
        model = CLRModel
        fields = ['uid', 'shipper','shipper_reference', 'consignee', 'book_no', 'no_container', 'size', \
          'product', 'port_of_loading', 'port_of_departure', 'final_port_of_destination',\
            'eta','vessel', 'status','eta_karachi','attachment']
        read_only_fields = ['uid']  # UUID is read-only and autogenerated

    def update(self, instance, validated_data):
        # Allow updating datd only if provided
        # if 'status' in validated_data:
        #     instance.datd = validated_data['datd']
        return super().update(instance, validated_data)
        
    

    def create(self, validated_data):
        # print("validated_data: ",validated_data['attachment'].name)
        # Extract filename from validated_data['file'] and store it in 'filename' field
        # if validated_data.get('filename'):
        #     validated_data['filename'] =  validated_data['attachment'].name
        return super().create(validated_data)

class ShipmentSerializer(serializers.ModelSerializer):
    class Meta:
        model = ShipmentStatus
        fields = ['uid', 'book_no', 'bl', 'no_container', 'eta_departure', 'eta_arrival', 'port', \
          'docs', 'surrender', 'containers','attachment',  'status']
        read_only_fields = ['uid']

    def update(self, instance, validated_data):
        return super().update(instance, validated_data)

class PortSerializer(serializers.ModelSerializer):
    class Meta:
        model = PortStatus
        fields = ['uid', 'bl', 'bl_containers', 'delivery_at', 'gd_no', \
          'clearing_agent', 'transporter', 'truck_no', 'driver_name', 'driver_mobile_no',\
            'truck_placement_date', 'truck_out_date', 'attachment', 'status']
        read_only_fields = ['uid']

    def update(self, instance, validated_data):
        return super().update(instance, validated_data)


class CityWiseTrackerSerializer(serializers.ModelSerializer):
    class Meta:
        model = CityWiseTracker
        fields = ['uid', 'bl', 'bl_containers', 'truck_no','curent_location', \
          'date', 'status']
        read_only_fields = ['uid']

    def update(self, instance, validated_data):
        return super().update(instance, validated_data)

class AddcitySerializer(serializers.ModelSerializer):
    class Meta:
        model = Addcity
        fields = ['uid', 'bl', 'truck', 'city', 'date']
        read_only_fields = ['uid']

    def update(self, instance, validated_data):
        return super().update(instance, validated_data)
    

# class DataSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = DataModel
#         fields = ['name', 'BL', 'CL']