import base64
import os
from rest_framework import serializers
# from django.core.files.base import ContentFile
from django.conf import settings
from .models import User, ShipmentStatus, CLRModel, \
    PortStatus, CityWiseTracker, Addcity

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['uid', 'username', 'password', 'email', 'role','mobile_no','company_name']
        extra_kwargs = {'password': {'write_only': True}}
        read_only_fields = ['uid']

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        return user
    
    # def validate(self, data):
    #     username = data.get('username')
    #     if User.objects.filter(username=username).exclude(pk=self.instance.pk).exists():
    #         raise serializers.ValidationError("Username already exists.")
    #     return data

class ClrSerializer(serializers.ModelSerializer):
    class Meta:
        model = CLRModel
        fields = ['uid', 'shipper','shipper_reference', 'consignee', 'book_no', 'no_container', 'size', \
          'product', 'port_of_loading', 'port_of_departure', 'final_port_of_destination',\
            'etd','vessel', 'status','eta_karachi','shipment_comment','bls','attachment']
        read_only_fields = ['uid']  # UUID is read-only and autogenerated

    def save_attachment(self, instance, attachment_data):

        if attachment_data:
            try:
                count = 0
                files = []
                for attachment in attachment_data.split(",data:"):
                    try:
                        format, imgstr = attachment.split(';base64,')
    
                        ext = format.split('/')[-1]  # Extract the file extension
                        img_data = base64.b64decode(imgstr)
                        
                        # Create a file name and save the file
                        file_name = str(count) + f'{instance.uid}.{ext}'
                        file_path = os.path.join(settings.MEDIA_ROOT, 'attachments', file_name)
                        
                        # Ensure the directory exists
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        
                        # Save the image data to the file
                        with open(file_path, 'wb') as f:
                            f.write(img_data)
                        count += 1
                        files.append(file_name)
                    except Exception as e:
                        print("========>",e)
                        raise serializers.ValidationError(f"Error saving attachment: {e}")
                # Set the relative path to the attachment field
                instance.attachment = os.path.join(",".join(files))
            except Exception as e:
                print("========>",e)
                raise serializers.ValidationError(f"Error saving attachment: {e}")
        
        return instance

    def create(self, validated_data):
        attachment_data = validated_data.pop('attachment', None)
        instance = CLRModel.objects.create(**validated_data)
        
        self.save_attachment(instance, attachment_data)
        
        instance.save()
        return instance
    
    def update(self, instance, validated_data):
        attachment_data = validated_data.pop('attachment', None)
        self.save_attachment(instance, attachment_data)

        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        
        instance.save()
        return instance

class ShipmentSerializer(serializers.ModelSerializer):
    class Meta:
        model = ShipmentStatus
        fields = ['uid', 'book_no', 'bl', 'no_container', 'eta_departure', 'eta_arrival', 'port', \
          'docs', 'surrender', 'containers','attachment',  'status']
        read_only_fields = ['uid']

    def save_attachment(self, instance, attachment_data):

        if attachment_data:
            try:
                count = 0
                files = []
                for attachment in attachment_data.split(",data:"):
                    try:
                        format, imgstr = attachment.split(';base64,')
    
                        ext = format.split('/')[-1]  # Extract the file extension
                        img_data = base64.b64decode(imgstr)
                        
                        # Create a file name and save the file
                        file_name = str(count) + f'{instance.uid}.{ext}'
                        file_path = os.path.join(settings.MEDIA_ROOT, 'attachments', file_name)
                        
                        # Ensure the directory exists
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        
                        # Save the image data to the file
                        with open(file_path, 'wb') as f:
                            f.write(img_data)
                        count += 1
                        files.append(file_name)
                    except Exception as e:
                        print("========>",e)
                        raise serializers.ValidationError(f"Error saving attachment: {e}")
                # Set the relative path to the attachment field
                instance.attachment = os.path.join(",".join(files))
            except Exception as e:
                print("========>",e)
                raise serializers.ValidationError(f"Error saving attachment: {e}")
        
        return instance

    def create(self, validated_data):
        attachment_data = validated_data.pop('attachment', None)
        instance = ShipmentStatus.objects.create(**validated_data)
        
        # Save attachment
        self.save_attachment(instance, attachment_data)
        
        instance.save()
        return instance
    
    def update(self, instance, validated_data):
        attachment_data = validated_data.pop('attachment', None)
        
        # Save attachment
        self.save_attachment(instance, attachment_data)
        
        # Update other fields
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        
        instance.save()
        return instance

class PortSerializer(serializers.ModelSerializer):
    class Meta:
        model = PortStatus
        fields = ['uid', 'bl', 'bl_containers', 'delivery_at', 'gd_no', \
          'clearing_agent', 'transporter', 'truck_no', 'driver_name', 'driver_mobile_no',\
            'truck_placement_date', 'truck_out_date', 'attachment', 'status']
        read_only_fields = ['uid']

    def save_attachment(self, instance, attachment_data):

        if attachment_data:
            try:
                count = 0
                files = []
                for attachment in attachment_data.split(",data:"):
                    try:
                        format, imgstr = attachment.split(';base64,')
    
                        ext = format.split('/')[-1]  # Extract the file extension
                        img_data = base64.b64decode(imgstr)
                        
                        # Create a file name and save the file
                        file_name = str(count) + f'{instance.uid}.{ext}'
                        file_path = os.path.join(settings.MEDIA_ROOT, 'attachments', file_name)
                        
                        # Ensure the directory exists
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        
                        # Save the image data to the file
                        with open(file_path, 'wb') as f:
                            f.write(img_data)
                        count += 1
                        files.append(file_name)
                    except Exception as e:
                        print("========>",e)
                        raise serializers.ValidationError(f"Error saving attachment: {e}")
                # Set the relative path to the attachment field
                instance.attachment = os.path.join(",".join(files))
            except Exception as e:
                print("========>",e)
                raise serializers.ValidationError(f"Error saving attachment: {e}")
        
        return instance

    def create(self, validated_data):
        attachment_data = validated_data.pop('attachment', None)
        instance = PortStatus.objects.create(**validated_data)
        
        # Save attachment
        self.save_attachment(instance, attachment_data)
        
        instance.save()
        return instance
    
    def update(self, instance, validated_data):
        attachment_data = validated_data.pop('attachment', None)
        
        # Save attachment
        self.save_attachment(instance, attachment_data)
        
        # Update other fields
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        
        instance.save()
        return instance


class CityWiseTrackerSerializer(serializers.ModelSerializer):
    class Meta:
        model = CityWiseTracker
        fields = ['uid', 'bl', 'bl_containers', 'truck_no','curent_location', \
          'date','comment', 'status']
        read_only_fields = ['uid']

    def update(self, instance, validated_data):
        return super().update(instance, validated_data)

class AddcitySerializer(serializers.ModelSerializer):
    class Meta:
        model = Addcity
        fields = ['uid', 'bl', 'truck', 'city', 'date']
        read_only_fields = ['uid']

    def update(self, instance, validated_data):
        return super().update(instance, validated_data)
